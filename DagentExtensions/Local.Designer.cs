//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DagentExtensions {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Local {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Local() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("DagentExtensions.Local", typeof(Local).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package agent with Name: {0} added successfully..
        /// </summary>
        internal static string AgentsCommandAgentAddedSuccessfully {
            get {
                return ResourceManager.GetString("AgentsCommandAgentAddedSuccessfully", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to the package(s) agent..
        /// </summary>
        internal static string AgentsCommandAgentDescription {
            get {
                return ResourceManager.GetString("AgentsCommandAgentDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package agent with Name: {0} disabled successfully..
        /// </summary>
        internal static string AgentsCommandAgentDisabledSuccessfully {
            get {
                return ResourceManager.GetString("AgentsCommandAgentDisabledSuccessfully", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package agent with Name: {0} enabled successfully..
        /// </summary>
        internal static string AgentsCommandAgentEnabledSuccessfully {
            get {
                return ResourceManager.GetString("AgentsCommandAgentEnabledSuccessfully", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package agent with Name: {0} removed successfully..
        /// </summary>
        internal static string AgentsCommandAgentRemovedSuccessfully {
            get {
                return ResourceManager.GetString("AgentsCommandAgentRemovedSuccessfully", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The agent specified cannot be empty. Please provide a valid agent..
        /// </summary>
        internal static string AgentsCommandAgentRequired {
            get {
                return ResourceManager.GetString("AgentsCommandAgentRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package agent name &apos;All&apos; is a reserved name..
        /// </summary>
        internal static string AgentsCommandAllNameIsReserved {
            get {
                return ResourceManager.GetString("AgentsCommandAllNameIsReserved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides the ability to manage list of agents located in %AppData%\NuGet\NuGet.config.
        /// </summary>
        internal static string AgentsCommandDescription {
            get {
                return ResourceManager.GetString("AgentsCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled.
        /// </summary>
        internal static string AgentsCommandDisabled {
            get {
                return ResourceManager.GetString("AgentsCommandDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled.
        /// </summary>
        internal static string AgentsCommandEnabled {
            get {
                return ResourceManager.GetString("AgentsCommandEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AgentsCommandFormatDescription.
        /// </summary>
        internal static string AgentsCommandFormatDescription {
            get {
                return ResourceManager.GetString("AgentsCommandFormatDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The agent specified is invalid. Please provide a valid agent..
        /// </summary>
        internal static string AgentsCommandInvalidAgent {
            get {
                return ResourceManager.GetString("AgentsCommandInvalidAgent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the agent..
        /// </summary>
        internal static string AgentsCommandNameDescription {
            get {
                return ResourceManager.GetString("AgentsCommandNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name specified cannot be empty. Please provide a valid name..
        /// </summary>
        internal static string AgentsCommandNameRequired {
            get {
                return ResourceManager.GetString("AgentsCommandNameRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No agents found..
        /// </summary>
        internal static string AgentsCommandNoAgents {
            get {
                return ResourceManager.GetString("AgentsCommandNoAgents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find any package agent(s) matching name: {0}..
        /// </summary>
        internal static string AgentsCommandNoMatchingAgentsFound {
            get {
                return ResourceManager.GetString("AgentsCommandNoMatchingAgentsFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registered Agents:.
        /// </summary>
        internal static string AgentsCommandRegisteredAgents {
            get {
                return ResourceManager.GetString("AgentsCommandRegisteredAgents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The agent specified has already been added to the list of available package agents. Please provide a unique remote..
        /// </summary>
        internal static string AgentsCommandUniqueAgent {
            get {
                return ResourceManager.GetString("AgentsCommandUniqueAgent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name specified has already been added to the list of available package agents. Please provide a unique name..
        /// </summary>
        internal static string AgentsCommandUniqueName {
            get {
                return ResourceManager.GetString("AgentsCommandUniqueName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AgentsCommandUpdateSuccessful.
        /// </summary>
        internal static string AgentsCommandUpdateSuccessful {
            get {
                return ResourceManager.GetString("AgentsCommandUpdateSuccessful", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [name] -Agent [agent].
        /// </summary>
        internal static string AgentsCommandUsageSummary {
            get {
                return ResourceManager.GetString("AgentsCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The API key for the remote..
        /// </summary>
        internal static string DeployCommandApiKey {
            get {
                return ResourceManager.GetString("DeployCommandApiKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deploys a package that was uploaded to the server to a remote Deployment Agent. If no sources are specified, all sources defined in %AppData%\NuGet\NuGet.config are used.  If NuGet.config specifies no sources, uses the default NuGet feed..
        /// </summary>
        internal static string DeployCommandDescription {
            get {
                return ResourceManager.GetString("DeployCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DeployCommandEmailDescription.
        /// </summary>
        internal static string DeployCommandEmailDescription {
            get {
                return ResourceManager.GetString("DeployCommandEmailDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DeployCommandIncludeDependencyDescription.
        /// </summary>
        internal static string DeployCommandIncludeDependencyDescription {
            get {
                return ResourceManager.GetString("DeployCommandIncludeDependencyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If not set, the destination folder will contain only the package name, not the version number.
        /// </summary>
        internal static string DeployCommandIncludeVersionDescription {
            get {
                return ResourceManager.GetString("DeployCommandIncludeVersionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; contains invalid package references..
        /// </summary>
        internal static string DeployCommandInvalidPackageReference {
            get {
                return ResourceManager.GetString("DeployCommandInvalidPackageReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DeployCommandNoItemsFound in &apos;{0}&apos;.
        /// </summary>
        internal static string DeployCommandNoItemsFound {
            get {
                return ResourceManager.GetString("DeployCommandNoItemsFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version string specified for package reference &apos;{0}&apos; is invalid..
        /// </summary>
        internal static string DeployCommandPackageReferenceInvalidVersion {
            get {
                return ResourceManager.GetString("DeployCommandPackageReferenceInvalidVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows prerelease packages to be installed. This flag is not required when restoring packages by installing from packages.config..
        /// </summary>
        internal static string DeployCommandPrerelease {
            get {
                return ResourceManager.GetString("DeployCommandPrerelease", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DeployCommandProjectDescription.
        /// </summary>
        internal static string DeployCommandProjectDescription {
            get {
                return ResourceManager.GetString("DeployCommandProjectDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{1}&apos; Sent to &apos;{0}&apos;.
        /// </summary>
        internal static string DeployCommandSent {
            get {
                return ResourceManager.GetString("DeployCommandSent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the id and optionally the version of the package to install. If a path to a packages.config file is used instead of an id, all the packages it contains are installed..
        /// </summary>
        internal static string DeployCommandUsageDescription {
            get {
                return ResourceManager.GetString("DeployCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nuget deploy msmq://agentHost/dagent elmah\n\nnuget install packages.config\n\nnuget install ninject -o c:\foo.
        /// </summary>
        internal static string DeployCommandUsageExamples {
            get {
                return ResourceManager.GetString("DeployCommandUsageExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to deploy packageId|pathToPackagesConfig [API key] [options].
        /// </summary>
        internal static string DeployCommandUsageSummary {
            get {
                return ResourceManager.GetString("DeployCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of the package to install..
        /// </summary>
        internal static string DeployCommandVersionDescription {
            get {
                return ResourceManager.GetString("DeployCommandVersionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DeployCommandWaitDescription.
        /// </summary>
        internal static string DeployCommandWaitDescription {
            get {
                return ResourceManager.GetString("DeployCommandWaitDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deploys a package that was uploaded to the server. If no sources are specified, all sources defined in %AppData%\NuGet\NuGet.config are used.  If NuGet.config specifies no sources, uses the default NuGet feed..
        /// </summary>
        internal static string DeployLocalCommandDescription {
            get {
                return ResourceManager.GetString("DeployLocalCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DeployLocalCommandProjectDescription.
        /// </summary>
        internal static string DeployLocalCommandProjectDescription {
            get {
                return ResourceManager.GetString("DeployLocalCommandProjectDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the id and optionally the version of the package to install. If a path to a packages.config file is used instead of an id, all the packages it contains are installed..
        /// </summary>
        internal static string DeployLocalCommandUsageDescription {
            get {
                return ResourceManager.GetString("DeployLocalCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nuget deploylocal elmah\n\nnuget install packages.config\n\nnuget install ninject -o c:\foo.
        /// </summary>
        internal static string DeployLocalCommandUsageExamples {
            get {
                return ResourceManager.GetString("DeployLocalCommandUsageExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to packageId|pathToPackagesConfig [API key] [options].
        /// </summary>
        internal static string DeployLocalCommandUsageSummary {
            get {
                return ResourceManager.GetString("DeployLocalCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All packages listed in {0} are already installed..
        /// </summary>
        internal static string InstallCommandNothingToInstall {
            get {
                return ResourceManager.GetString("InstallCommandNothingToInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No API Key was provided and no API Key could be found for {0}. To save an API Key for a source use the &apos;setApiKey&apos; command..
        /// </summary>
        internal static string NoAgentApiKeyFound {
            get {
                return ResourceManager.GetString("NoAgentApiKeyFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NoAgentQueueFound &apos;{0}&apos;.
        /// </summary>
        internal static string NoAgentQueueFound {
            get {
                return ResourceManager.GetString("NoAgentQueueFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All.
        /// </summary>
        internal static string ReservedPackageNameAll {
            get {
                return ResourceManager.GetString("ReservedPackageNameAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restoring NuGet packages...
        ///To prevent NuGet from downloading packages during build, open the Visual Studio Options dialog, click on the NuGet Package Manager node and uncheck &apos;{0}&apos;..
        /// </summary>
        internal static string RestoreCommandPackageRestoreOptOutMessage {
            get {
                return ResourceManager.GetString("RestoreCommandPackageRestoreOptOutMessage", resourceCulture);
            }
        }
    }
}
